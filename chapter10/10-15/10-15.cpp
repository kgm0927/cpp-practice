#include <iostream>
using namespace std;


//
// 
// *람다 대수와 람다식
// 
// C++11부터 도입된 람다는 람다 대수(lambda calculus)에서 유래한다. 람다 대수에서 람다식(lambda expression)은 수학의 함수를 단순하게 표현하는 방법이다.
// 
// 
// f(x,y)=x+y
// 
// 
// 
// 이를 수학의 람다식으로 바꾸면, 다음과 같이 이름을 빼고 간소하게 표현한다.
// 
// (x,y)-> x+y
// 
// 수학에서 '이름없는 함수'를 '람다식'이라고 한다. 그리고 다음과 같이 괄호와 함께, x,y에 대입될 값을 지정하면
// 람다식의 계산이 이루어진다.
// 
// ((x,y)-> x+y)(2,3)
// =2+3 =5
// 
// 
// 
// 
// C++에서 람다식 선언
// 
// 프로그래밍 세계에서 람다는 이름 없는 익명 함수(anonymous function)로, 람다식(lambda expression) 혹은 람다 함수로 불린다. 람다식의 기본 구조는
// 이러하다.
// 
// 
// ex)
// 캡처 리스트			매개변수 리스트			생략 가능		함수바디
// [       ]				(		)		-> 리턴타입			{/* 함수 코드 작성*/}
// 
// 
// 
// 
// 
// * 캡쳐 리스트
// 
// 람다식의 외부에 선언된 변수(지역변수, 전역변수)목록으로, 람다식에서 사용하고자 할 때 나열하며 아래와 같이 여러 표현들이 있다.
// 
// 표: 캡쳐 리스트에 작성 가능한 요소
// 
// 
// 표현 | 의미
// [x]  | 변수 x값 활용
//		|
// [&x]	| 참조 변수 x 활용
//		|
// [=]	| 모든 변수의 값 활용
//		|
//	[&]	| 모든 참조 변수 활용
// 
// 
// 
// 
// 
// * 매개 변수 리스트
// 
// 보통 함수의 매개 변수 리스트와 같다
// 
// 
// * 함수 바디
// 
// 람다식이 호출될 때 실행되는 코드로서, 함수를 작성하는 방법과 동일하다.
// 
// 
// 
//



int main() {
	[](int x, int y) {
		cout << "합은 " << x + y;
	}(2, 3);
}