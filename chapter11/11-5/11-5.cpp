#include <iostream>
using namespace std;


//
// 
//		11.4 포맷 입출력
// 
//	<< 연산자 cout의 put(), write() 멤버 함수는 포맷 없이 데이터를 출력한다. C++는 C언어의
//	scanf(), printf()처럼 포맷 입출력을 제공하는가? C++의 입출력 시스템은 다음 3가지 방법으로
// 포맷 입출력을 지원한다.
// 
//		* 포맷 플래그
//		* 포맷 함수
//		* 조작자
// 
// 
// 
// 
//		포맷 플래그
// 
// C++ 입출력 스트림은 32개의 포맷 플래그(format flag)를 저장하는 멤버 변수를 두고, 이름 참조하여
// 포맷 입출력한다. 
// 
// 포맷 플래그는 모든 입출력 스트림에서 공통으로 사용되므로, 밑의 표와 같이 ios 클래스
// 에 정수형 상수로 정의되어 있다. 하나의 플래그는 한 비트(bit)로 표현되면 한 가지 포맷 정보를 표현한다.
// cin이나 cout는 입출력 시 이 포맷 변수에 세팅된 플래그 값을 반영하여 포맷 입출력을 수행한다.
// 
// 
// 
// 
//
// 
// 		플래그		|				값			|			의미
//	ios::skipws					0x0001					입력시 공백 문자(스페이스, 탭, 개행문자)를 무시
// ----------------------------------------------------------------------------------------------------------------
//	ios::unitbuf				0x0002					출력 스트림에 들어오는 데이터를 버퍼링하지 않고 바로 출력
// ----------------------------------------------------------------------------------------------------------------
//	ios::uppercase				0x0004					16진수의 A~F, 지수 표현의 E를 대문자로 출력
// ----------------------------------------------------------------------------------------------------------------
//	ios::showcase				0x0008					16진수이면 0x를, 8진수이면 0을 숫자 앞에 붙여서 출력
// -----------------------------------------------------------------------------------------------------------------
//	ios::showpoint				0x0010					실수 값에 대해, 정수 부분과 더불어 소수점 이하의 끝자리들을 0으로 출력
// ----------------------------------------------------------------------------------------------------------------------------
//	ios::showpos				0x0020					양수에 대해 + 기호 출력
// ----------------------------------------------------------------------------------------------------------------------------
//	ios::left					0x0040					필드를 왼쪽 맞춤(left-align) 형식으로 출력
// ----------------------------------------------------------------------------------------------------------------------------
//	ios::right					0x0080					필드를 오른쪽 맞춤(right-align) 형식으로 출력
// ----------------------------------------------------------------------------------------------------------------------------
//	ios::internal				0x0100					부호는 왼쪽 맞춤으로 숫자는 오른쪽 맞춤으로 출력
// ------------------------------------------------------------------------------------------------------------------------------
//	ios::dec					0x0200					10진수로 출력. 디폴트 설정
// ----------------------------------------------------------------------------------------------------------------------------
//	ios::oct					0x0400					8진수로 출력
// -----------------------------------------------------------------------------------------------------------------------------
//	ios::hex					0x0800					16진수로 출력
// -----------------------------------------------------------------------------------------------------------------------------
//	ios::scientific				0x1000					실수에 대해 과학 산술용 규칙에 따라 출력
// -----------------------------------------------------------------------------------------------------------------------------
//	ios::fixed					0x2000					실수에 대해 소수점 형태로 출력
// -----------------------------------------------------------------------------------------------------------------------------
//	ios::boolalpha				0x4000					설정되면, 논리값 true를 "true"로, false를 "false"로 출력하고,
//														설정되지 않으면, 정수 1과 0으로 출력
// 
// 
// 
// 
// 포맷을 지정하는 함수는 setf(), 지정된 플래그를 해제하는 함수는 unsetf()이다.
// 
// long setf(long flags): flags를 스트림의 포맷 플래그로 설정하고 이전 플래그를 리턴한다.
//						
// 
// 
// 
// long unsetf(long flags): flags를 설정된 비트 값에 따라 스트림의 포맷 플래그를 해제하고 이전 플래그를 리턴한다.
// 
// 
// 
// 만일 정수 30을 16진수로 출력하고자 한다면 다음과 같다.
// 
//	cout.unsetf(ios::dec); // 10진수 해제
//	cout.setf(ios::hex);	// 16진수로 설정
//	cout<< 30 <<endl;		// 1e 출력
// 
// 
// 
// 
// 여러 플래그들을 '비트-OR(|) 연산으로 합치면 여러 포맷을 동시에 지정할 수 있다.
// 예를 들어 다음과 같이 ios::dec 플래그와 ios::showpoint 플래그를 함께 사용할 수 있다.
// 
// 
// cout.setf(ios::dec | ios::showpoint);	// 10진수 표현과 동시에
//											// 실수 경우 소숫점 이하 나미지 빈 칸은 0으로 출력
// 
// cout<<23.5<<endl; //23.5000 출력
// 
// 
// 포맷 플래그는 한번 설정하면 해제할 때까지 유지한다.
// 
// 
// 
// 
int main() {
	cout << 30 << endl;	// 10진수로 출력

	cout.unsetf(ios::dec);// 10진수 해제
	cout.setf(ios::hex);	// 16진수로 설정
	cout << 30 << endl;
	// 1e 출력

	cout.setf(ios::showbase);	// 16진수에 0x접두어 붙이도록 설정
	cout << 30 << endl;
	// 0x1e 출력

	cout.setf(ios::uppercase); // 16진수의 A~F를 대문자로 출력
	cout << 30 << endl;
	// 0X1E 출력

	
	
	
	cout.setf(ios::dec | ios::showpoint);	// 10진수 표현과 동시에
											// 실수에 소숫점이하 나머지는 0으로 출력

	cout << 23.5 << endl;
	// 23.5000 출력


	cout.setf(ios::scientific); // 실수를 과학산술용 표현으로 출력
	cout << 23.5 << endl;
	// 2.350000E+001 출력

	cout.setf(ios::showpos); //양수인 경우 + 부호도 함께 출력
	cout << 23.5;
	// +2.350000E+001 출력



}