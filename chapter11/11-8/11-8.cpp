//
//	* 매개변수를 가지는 조작자
// 
// 이들은 <iomanip> 헤더 파일에 정의되어 있기 때문에, 이들을 사용하기 위해서는 <iomanip> 헤더
// 파일을 include 해야 한다.
// 
// 
// 
// 
// <표 11-4> 매개변수를 가지는 조작자
// 
//		조작자						|		I/O				|		용도
//	resetioflages(long flags)				IO					flags에 지정된 플래그들 해제
// ----------------------------------------------------------------------------------------------------------------
//	setbase(int base)						O					base를 출력할 수의 진수로 지정
// ----------------------------------------------------------------------------------------------------------------
//	setfill(char cFill)						I					필드를 출력하고 남은 공간에 cFill 문자로 채움
// -------------------------------------------------------------------------------------------------------------------
//	setioflags(long flags)					O					flags를 스트림 입출력 플래그로 설정
// ------------------------------------------------------------------------------------------------------------------
//	setprecision(int np)					O					출력되는 수의 유효 숫자 자리수를 np개로 설정. 소수점(.)은 별도의 카운트
// ------------------------------------------------------------------------------------------------------------------------------------
//	setw(int minWidth)						O					필드의 초소 너비를 minWidth로 지정
// 
// 
// 
//  0에서 50까지의 5의 배수를 10진수, 8진수, 16진수로 출력한다.
//

#include <iostream>
#include <iomanip>
using namespace std;

int main() {
	cout << showbase;


	cout << setw(8) << "Number";

	cout << setw(10) << "Octal";
	cout << setw(10) << "Hexa" << endl;


	// 하나의 수를 십진수, 8진수, 16진수 형태로 한 줄에 출력한다.
	for (int i = 0; i < 50; i+=5)
	{
		cout << setw(8) << setfill('.') << dec << i;// 10진수
		cout << setw(10) << setfill(' ') << oct << i;// 8 진수
		cout << setw(10) << setfill(' ') << hex << i << endl;// 16 진수

	}
}

//
//		조작자의 특징
// 
// 조작자는 사용하기 쉽고 출력 코드를 간결하게 만들기 위해, setf(), width(), fill(),precision() 등의 멤버 함수보타 조작자의 사용을 권한다.
// 그러나 조작자로 설정한 포맷은 한 번의 입출력에만 적용되므로 입출력마다 포맷을 지정해야 한다.
// 
// 
// 대부분의 조작자는 내부에서 setf() 함수를 호출한다. hex 조작자 함수는 cout.setf(ios::hex);를 호출하며 showbase 조작자 함수는 cout.setf(ios::showbase);
// 를 호출한다.
// 
// 
//