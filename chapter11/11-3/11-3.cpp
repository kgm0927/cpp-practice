#include <iostream>
#include <cstring>
using namespace std;

//
// 
// 
//		문자열 입력
// 
// istream에는 문자열을 읽을 수 있는 get() 함수도 잇다. 다음은 문자열을 읽는 get()함수의 원형이다.
// 
// 
// 
// istream& get(char* s, int n)
//			입력 스트림으로부터 n-1개의 문자를 읽어 배열 s에 저장하고 마지막에 '\0' 문자 삽입. 입력 도중 '\n'을 만나면 '\0'을 삽입하고
//			리턴.
// 
// 
// 
// 
// 
// 
// 
// 이 함수는 '배열 끝에 "\0"을 삽입'하여 문자열이 되도록 한다.
// 
// char str[10];
// cin.get(str,10);	// 최대 9개의 문자를 읽고 끝에 '\0'를 붙여 str 배열에 저장
//  cout<<str;
// 
// 만약 Hello를 배열 str에 입력할 시 총 6개의 문자가 str에 입력된다.
// 
// 
// 
// 
// * 입력 도중 '\n'을 만날 때
// 
// get()이 입력 도중 <Enter> 키를 만날 때 주의해야 한다. 입력 스트림에서 '\n' 문자를 만나면 읽기를 중단하고 리턴하여,
// '\n'이 입력 스트림 버터에 남아있다. 만일 이 상태에서 다시 읽기를 하게 되면 입력 스트림에 남아있는 '\n'부터 읽기 시작하여
// 아무것도 읽지 않고 바로 리턴한다. 이 문제로 프로그램은 '무한 루프'에 빠질 수 있다.
// 
// 이를 제거하기 위해 다음과 같이 하면 된다.
// 
// cin.get(); 혹은
// cin.ignore(1);// cin 버퍼에서 문자 1개 삭제
// 
// 밑의 예제에서 cin.ignore(1);을 포함하는 else문을 제거하면, 프로그램이 무한 루프에 빠진다.
// 
// 
// * 입력 도중 EOF나 오류가 생길 때
// 
// get()은 읽기 도중 EOF(ctrl-z 키)를 만나거나 오류가 발생하면 읽기를 중단하고, '\0'를 배열에 삽입하고 리턴한다.
// 
// 
//

int main() {
	char cmd[80];
	cout << "cin.get(char*,int)로 문자열을 읽는다." << endl;
	while (true) {
		cout << "종료하려면 exit를 입력한다>>";
		cin.get(cmd, 80); // <Enter> 키까지 문자열 읽기, 79개까지 문자 읽음
		
		if (strcmp(cmd, "exit") == 0) {
			cout << "프로그램을 종료한다....";
			return 0;
		}
		else
			cin.ignore(1);	// 버퍼에 남아 있는 <Enter> 키('\n') 제거
							// 이 코드를 제거하면 무한 루프에 빠진다.

	}
}

//
// 
// 잠깐! : get() 함수로 한글 문자와 한글 문자열 읽기
// 
// cin은 문자를 한 바이트만 다루도록 작성되어 있기 대문에, get() 함수는 2바이트로 구성되는 한글 문자를
// 읽을 수 없다. 하지만, 한글 문자열의 경우 get(char* str, int n) 함수를 호출하고 읽을 문자 개수 2배 크기의
// 배열을 str에 넘겨주면 한글 문자열을 읽을 수 있다.
//
//