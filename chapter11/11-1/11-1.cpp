#include <iostream>
using namespace std;

//
// 
// 
// 스트림 개념
// 
// 스트림(stream): 영어단어로서 흐르는 시냇물이라는 의미이다. 컴퓨터 기술에서
// 스트림은 연속적인 데이터의 흐름 혹은 데이터를 전송하는 소프트웨어 모듈을 의미한다.
// 스트림은 프로그램과 장치를 연결하여 '바이트'단위로 입출력한다.
// 
// 
// c++에서 스트림은 입력 스트림과 출력 스트림으로 나뉜다. 
// 
// 입력 스트림: 키보드, 네트워크, 파일
// 
// 출력 스트림: 프린터, 하드 디스크, 스크린, 네트워크, 파일
// 
// 이 모든 스트림은 모든 입출력 데이터를 순서대로 내보낸다.
// 
// 
// 
// c++ 응용 프로그램은 출력 장치에 직접 출력하는 대신 출력 스트림에 출력하고, 입력 장치로부터
// 직접 입력받는 대신 입력 스트림으로부터 입력 받는다. c++의 표준 입력 스트림 객체는 'cin'이며,
// 표준 출력 스트림 객체는 'cout'이다.
// 
// 
// 
// 
// 
// 
// c++ 입출력 스트림 버퍼
// 
// 
// c++ 입출력 스트림의 중요한 특징은 스트림이 버퍼를 가진다는 것이다.
// 
// 입력 스트림 버퍼: 입력된 데이터를 프로그램에 전달하기 전에 일시 저장하는 공간
// 
// 출력 스트림 버퍼 : 출력 장치로 보내기 전에 데이터를 일시 저장하는 공간이다.
// 
// 
// 
// 
// 
// 
// * 키 입력 스트림 버퍼
// 
// cin 입력 스트림: 사용자가 입력한 'H','e','l','l','u' 키를 순서대로 버터에 저장하고
// 프로그램에는 전달하지 않는다. 아직 키 입력이 끝났다고 볼 수 없기 때문이다. 그리고
// '벡스페이스'를 이용하여 버퍼에 있는 최근의 문자 'u'를 지운다.
// '벡스페이스'는 버퍼에 저장되는 대신 버퍼를 제어하는 '제어키'역할을 한다. 그리고 'o'을
// 사용자가 입력한다. 그리고 <enter>키를 누르면 'Hello'가 입력을 기다리고 있는 c++
// 프로그램에게 전달된다.
// 
// 
// 
// 
// 
// * 스크린 출력 스트림 버퍼
// 
// cout 출력 스트림: c++ 프로그램이 'C++' 문자열을 출력하면 일단 출력 스트림의 버퍼에 저장된다.
// 출력 스트림은 '\n'이 도착하거나 버퍼가 꽉 찰 때 스크린에 출력시킨다. 만약 C++ 프로그램이 
// cout.flush() 명령을 내리면 출력 스트림은 버퍼에 있는 내용을 모두 장치에 출력한다.
// 
// 
// * 버퍼의 필요성
// 
// c++ 입출력 스트림은 운영체제 API를 호출하여 입출력 장치와 프로그램 사이에서 데이터를 전송한다. 자주
// 운영체제 API가 호출될수록 하드 디스크나 네트워크 장치가 자주 작동하게 되어 시스템의 효율은 나빠진다.
// 버퍼가 있다면, 쓰기가 이루어진 데이터를 스트림 버퍼에 모아 두었다가, 한 번에 운영체제 API를 호출하여 파일에
// 쓰면 운영체제와 장치를 구동하는 횟수가 들어 시스템 효율이 올라가게 된다.
// 
// 
// 
// 
// * c++ 표준은 스트림 입출력만 지원
// 
// 입출력 방식에 스트림 입출력과 달리, 버퍼를 가지지 않는 '저수준 입출력 방식'이 있다. 
// 
// 저수준 입출력 방식: 키는 입력 즉시 프로그램에게서 전달됨. 이 방식으로 하면 키가 입력되는 즉시
// 프로그램에 전달이 되며, 뒤이어 입력된 '벡스페이스'와 수정 요소 또한 바로 전달된다. 보통 게임과
// 같이 특별한 응용 프로그램 제작을 위해 사용한다.
// 
// 
// 하지만 표준 C++에서는 오로지 스트림 입출력만 다룬다. 이 책에서또한 그러하다.
// 
// 
// 
//			C++ 입출력 라이브러리
// 
// 입출력 라이브러리를 템플릿을 이용하여 재작성하고, char 타입의 한 바이트로만 문자를 다루도록 작성된 것을 '다국어' 수용을 위해 여러 바이트로 구성되는 문자를 다룰 수
// 있도록 개선했다.
// 
// 
// * 2003년 이전의 c++ 입출력 라이브러리
// 
// 과거에는 문자 하나가 2바이트로 구성이 되는 한글 문자를 입력 할 수 없었다.
// cin으로 2바이트로 구성하는 문자를 읽을 수 없다. 과거의 입출력 클래스들은 다음과 같은데,
// 이들 모두 문자를 한 바이트로만 다루는 클래스이다.
// 
// ios, istream, ostream, iostream, ifstream, ofstream, fstream
// 
// 
// 
// * 현 표준의 C++ 입출력 라이브러리
// 
// 
// 한 문자를 여러 바이트로 표현하는 다국어의 입출력을 위해 새로운 입출력 표준을 정하지 않을 수 없다.
// 이를 위해 ANSI/ISO C++ 표준 위에서는 템플릿(template)을 이용하여 C++ 입출력 라이브러리를 일반화시켰다.
// 대표적인 템플릿 클래스들은 다음과 같다.
// 
// basic_ios, basic_istream, basic_ostream, basic_iostream, basic_ifstream,
// basic_ofstream, basic_fstream
// 
// 
// 이들 간에 상속관계가 존재한다.(책 참고)
// 
// 
// 그러므로 새 표준을 사용하는 C++ 개발자들은 이들 템플릿 클래스에 구체적인 타입을 대입해서 입출력 클래스를 구체화(specialization)하여
// 사용해야한다.
// 
// 현재 다행이도, 구 표준을 기반으로 작성된 C++ 프로그램과의 호환성을 위해, 현재 입출력 라이브러리의 헤더 파일에 템플릿을 char 타입으로 구체화
// 시키고 ios, istream, ostream, iostream 등 과거의 이름들을 그대로 사용할 수 있도록 typedef 시켜 놓았다.
// 
// 하지만 표준이 변했다 하더라도 여전히 cin으로는 한글을 문자 단위로 읽을 수는 없다.
// 
// 
// 
// 
// * 표준 입출력을 위한 템플릿 클래스들
// 
// 스트림 입출력 기반 탬플릭 클래스
// 
//		basic_ios
// 
// 입출력 스트림 템플릿 클래스
// 
// basic_istream, basic_ostream, basic_iostream
// 
// 
// 파일 입출력 템플릿 클래스
// 
// basic_ifstream, basic_ofstream, basic_fstream
// 
// 
// 
// 
// 
// 
// 표<11-1> char 단위로 문자를 입출력하는 입출력 스트림 클래스
// 
// 클래스				|							설명
// ___________________________________________________________________________________
//						|
//						| 모든 입출력 스트림 클래스들의 기본(Base) 클래스. 스트림 입출력에 필요한
//		ios				| 공통 함수와 상수, 멤버 변수 선언
//						|
//------------------------------------------------------------------------------------
//						|
//		istream			|	istream은 문자 단위 입력 스트림, ostream은 문자 단위 출력 스트림,
//		ostream			|	iostream은 문자 단위로 입출력을 동시에 할 수 있는 스트림 클래스
//		iostream		|
//						|
//						|
//						|
// -------------------------------------------------------------------------------------
//						|
//		ifstream		|	파일에서 읽고 쓰는 기능을 가진 파일 입출력 스트림 크래스, 파일에서
//		ofstream		|	읽을 때는 ifstream 클래스를, 파일에 쓸 때는 ofstream 클래스를,
//		fstream			|	읽고 쓰기를 동시에 할 때는 fstream 클래스 사용
//						|
//						|
//						|
// 						|
//						|
//
// 
// 
// * C++ 표준 입출력 스트림 객체
// 
// 
// <iostream> 헤더 파일을 include 한 C++ 프로그램이 실행되기 시작하면 cin, cout, err등 표준 입출력 스트림 객체가 생성되며, C++ 프로그램에서는
// 바로 이들을 사용할 수 있다.
// 
//		* cin: 키보드 장치와 연결된 istream 타입의 표준 입력 스트림 객체 
//		* cout: 스크린 장치와 연경된 ostream 타입의 표준 출력 스트림 객체
//		* cerr 와clog: 둘 다 표준 오류 출력 스트림 객체. clog는 버퍼를 거치지만 cerr는 버퍼를 거치지 않고 스크린에 오류 출력
// 
// 
// 
// 
// 
// 11.2 ostream의 멤버 함수를 이용한 문자 출력 (page.541)
// 
// 
// ostream 클래스는 << 연산자 외에 화면 출력을 위한 다른 멤버 함수를 제공한다.
// 
// 
// -------------------------------------------------------------------------------------------
// 
// ostream& put(char ch): ch 문자를 스트림에 출력
// 
// ostream& write(char* str, int n): str 배열에 있는 n개의 문자를 스트림에 출력
// 
// ostream& flush(): 현재 스트림 버퍼에 있는 내용 강제 출력
// 
// 
// 
// 
// 
// 
// put(): put()은 문자 단위로 출력하는 함수로서, 다음은 문자 'A'를 출력하는 예이다.
// 
// cout.put('A');
// 
// 
// 
// 
// put()은 다음과 같이 ASCII 코드로 직접 문자로 출력할 수 있다.
// 
// cout.put(33); // ASCII 코드 33 문자 '!'이므로 '!'가 출력됨
// 
// 
//						
// put() 함수는 ostream&를 리턴하므로 다음과 같이 연결하여 사용할 수 있다.
// 
// cout.put('C').put('+'),put('+').put(' ');
// 
// 
// 
// 
// write()
//	write()는 char 배열에 들어 있는 문자들을 출력하는 함수로서, 사례를 다음과 같다.
// 
// char str[]='I love programming'	// char *str="I love programming"; 과 동일함
// cout.write(str,6)				// str에 있는 6개의 문자 "I love"출력
// 
// 
// 
// flush()
//		flush()는 출력 버퍼에 있는 문자들을 모두 강제로 출력시킨다.
// cout.put('A');
// cout.flush();
// 
// cout.put('A')에 의해 출력된 문자 'A'가 스트림 버퍼에 남아 있을 대, cout.flush()에 의해 강제 출력된다.
// 컴파일러에 따라 강제 출력할 수도 있기 때문에 cout.flush() 호출이 필요 없는 경우도 있다.
// 
// 
// 
// 
// 
//


int main() {

	// Hi!를 출력하고 다음 줄로 넘아간다
	cout.put('H');
	cout.put('i');
	cout.put(33);	// ASCII 코드 33은 '!' 문자임
	cout.put('\n');


	// "C++"을 출력한다.
	cout.put('C').put('+').put('+').put(' ');


	char str[] = "I love programming";
	cout.write(str, 6);


}