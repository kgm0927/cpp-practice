#include <iostream>
using namespace std;


//			조작자
// 
// 
// 입출력 포맷을 지정하는 마지막 방법은 조작자(manipulator) 혹은 스트림 조작자라고
// 불리는 함수를 이용하는 방법이다. 
// 
// 조작자는 ANSI/IOS 표준 C++ 헤더 파일에 정의된
// 특별한 원형(function prototype)을 가진 함수로서, 매개변수 없는 조작자과 매개 변수를
// 가진 조작자로 나뉜다. 조작자는 항상 <<, >> 연산자와 함께 사용된다.
// 
// 
// 
// 
// * 매개 변수 없는 조작자
// 
// 표준 C++ 에서 제공하는 매개 변수 없는 조작자는 아래에 있는 표와 같다. 조작자를 사용하기 위해서 <iostream> 헤더 파일을
// include해야 한다.
// 
// #include <iostream>
// 
// 조작자를 사용하여 포맷 출력하는 간단한 예를 들어본다.
// 
// cout<<hex<<showcase<<30<<endl;
//
// A): 0x1e
// 
// 
// 이 짧은 코드에 hex, showbase, endl의 '3개 조작자'가 사용되고 있다. hex는 16진수 형식으로 출력하도록 포맷하며, showbase는 숫자의
// 진수를 표기하도록 포맷하므로, 출력되는 정수가 16진수의 경우 0x를, 8진수의 경우 0을 숫자 앞에 덧붙인다.
// endl은 버퍼에 있는 데이터를 모두 출력하고 한 줄 띄도록 포맷하는 조작자이다. 그러므로 이 코드의 실행 결과 30은 16진수 0x1e로 출력되었다.
// 
// cout<< dec<<showpos<<100<<endl;
// +100
// 
// 이 소스 역시 3개의 조작자를 활용하고 있으며, dec 조작자에 의해 10진수로 , showpos 조작자에 의해 '+' 부호를 붙여서 결과적으로 '+100'이 출력된다.
// 출력 후 다음으로 넘어간다.
// 
// 
// 
// 
// 잠깐! : endl 과 '\n'
// 
// endl이 '\n' 문자 상수로 생각해온 독자가 있다면 이 시간부터는 endl이 조작자 함수임을 잊지 말아야 한다. endl은 버퍼를 모두 (flush())하고 다음 줄로
// 넘어가도록 하는 조작자이다.
// 
// 
// 
// 
// 
// <표 11-3> 매개변수 없는 조작자
// 
//		조작자					 I/O							용도
// ---------------------------------------------------------------------------------------------------
//		endl					  O					스트림 버퍼를 모두 출력하고 다음 줄로 넘어감
// ---------------------------------------------------------------------------------------------------
//		oct						  0					정수 필드를 8진수 기반으로 출력
// ---------------------------------------------------------------------------------------------------
//		dec						  O					정수 필드를 10진수 기반으로 출력
// ---------------------------------------------------------------------------------------------------
//		hex						  O					정수 필드를 16진수 기반으로 출력
// ---------------------------------------------------------------------------------------------------
//		left					  0					왼쪽 맞춤으로 출력
// ---------------------------------------------------------------------------------------------------
//		right					  O					오른쪽 맞춤으로 출력
// ---------------------------------------------------------------------------------------------------
//		fixed					  O					실수 필드를 고정 소수점 방식으로 출력
// ---------------------------------------------------------------------------------------------------
//		scientific				  O					실수 필드를 과학 산술용 방식으로 출력
// ---------------------------------------------------------------------------------------------------
//		flush					  O					스트림 버퍼 강제 출력
// ---------------------------------------------------------------------------------------------------
//		showbase				  O					16진수의 경우 0x로, 8진수 0을 앞에 붙여서 출력
// ---------------------------------------------------------------------------------------------------
//		noshowbase				  O					showbase 지정 취소
// ---------------------------------------------------------------------------------------------------
//		showpoint				  O					실수 값에 대해, 정수 부분과 소수점 이하의 끝자리 이후 남은 공간을 0으로 출력
// ---------------------------------------------------------------------------------------------------
//		noshowpoint				  O					showpoint 지정 취소
// ---------------------------------------------------------------------------------------------------
//		showpos					  O					양수인 경우 + 부호를 붙여 출력
// ---------------------------------------------------------------------------------------------------
//		skipws					  I					입력 스트림에서 공백 문자를 읽지 않고 건너뜀
// ---------------------------------------------------------------------------------------------------
//		noskipw					  I					skipws 지정 취소
// ---------------------------------------------------------------------------------------------------
//		boolalpha				  O					불린 값이 출력될 때, "true" 혹은 "false" 문자열로 출력
// ---------------------------------------------------------------------------------------------------
//



int main() {
	cout << hex << showbase << 30 << endl;
	cout << dec << showpos << 100 << endl;
	cout << true << ' ' << false << endl;
	cout << boolalpha << true << ' ' << false << endl;
}