#include <iostream>
using namespace std;

class A {
public:
	A() { cout << "생성자 A" << endl;}
	A(int x) {
		cout << "매개변수생성자 A" << x << endl;
	}
};

class B :public A {
public:
	B() {// A() 호출하도록 컴파일 됨
		cout << "생성자 B" << endl;
	}
	B(int x) {// A() 호출하도록 컴파일 됨
		cout << "매개변수생성자 B" << x << endl;
	}


	
}; int main() {
	B b(5);
}

// 컴파일러는 묵시적으로 기본 클래스의 기본 생성자를 호출하도록 컴파일 함. 

// 이제 파생 클래스의 생성자를 작성할 때 기본 클래스의 생성자를 명시적으로 선택하는 방법을 알아본다.
//
// 파생 클래스 B의 생성자 B(int x)가 기본클래스 A의 생성자 A(int x)를 명시적으로 선택하는 코드를 보면 다음과 같다.
// 
// B(int x):A(x+3) {
//	cout<< "매개변수생성자 B"<<x<<endl;
// }
// 
// B(int x) 생성자가 호출되면, 매개 변수 x로 받은 값에 3을 더하여 생성자 A(int x)의 매개변수 x에 넘겨준다. main() 함수에서 다음과 같이
// 객체b를 생성하면,
// 
// B b(5);
// 
// B(int x)가 호출되며 x에 5가 전달되고, 이 생성자는 자신의 생성자 코드를 실행하기 전 생성자 A(8)을 호출한다.
// 
// 파생 클래스에서 기본 클래스의 생성자를 선택하는 코드를 클래스의 선언부와 구현부로 분리하면 다음과 같다.
// 
// class B: public A{
// 
// public:
//	B(int x);
// };
// 
// B::B(int x): A(x+3){// 명시적으로 기본 클래스의 생성자를 선택호출함.
// 
// cout<<"매개변수생성자 B"<<x<<endl;
// }
// 
// int main(){
// B b(5);
// }
// 

// 
// 
//