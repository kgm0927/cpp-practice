#include <iostream>
#include <string>
using namespace std;

int main() {
	string names[5];

	for (int i = 0; i < 5; i++)
	{
		cout << "이름>> ";
		getline(cin, names[i], '\n');

	}

	string latter = names[0];
	for (int i = 1; i < 5; i++)
	{
		if (latter < names[i]) {
			latter = names[i];
		}
	}

	cout << " 사전에서 가장 뒤에 나오는 문자열은 " << latter << endl;
}

//
// 
// 
// <표 4-2> string 클래스의 주요 멤버 함수(표에서 pos는 문자열 내의 문자 위치로서, 0부터 시작함)
// 
// 
//		멤머 함수							|								설명
// ------------------------------------------------------------------------------------------------
//	string& append(const string& str)		| 문자열 뒤에 str 추가
// ------------------------------------------------------------------------------------------------
//	string& append(const string& str,		| str 문자열 내 pos 위치에서 n개의 무자를 현재 문자열
//	int pos, int n)							| 뒤에 덧붙임
// ------------------------------------------------------------------------------------------------
// string& insert(int pos, const string&	| 문자열의 pos 위치에 str 삽입
// str)										|
// ------------------------------------------------------------------------------------------------
// string& replace(int pos, int n,			| 문자열의 pos 위치부터 n개 문자를 str 문자열로 대치
//	const string& str)						|
// ------------------------------------------------------------------------------------------------
// int size()								| 문자열의 길이 리턴, 문자열의 길이는 바이트 수(영어 문자
//											| 개수)
// ------------------------------------------------------------------------------------------------
// int length()								| 문자열 길이 리턴. size()와 동일
//											|
// ------------------------------------------------------------------------------------------------
// int capacity()							| 할당된 메모리 크기 리턴
// ------------------------------------------------------------------------------------------------
// string& erase(int pos, int n)			| pos 위치부터 n개 문자 삭제
// ------------------------------------------------------------------------------------------------
// void clear()								| 문자열 모두 삭제, 크기를 0으로 만듦
//-------------------------------------------------------------------------------------------------
// bool empty()								| 문자열의 크기가 0이면 true, 아니면 false 리턴
// ------------------------------------------------------------------------------------------------
// char& at(int pos)						| pos 위치의 문자 리턴
// ------------------------------------------------------------------------------------------------
// int find(const string& str)				| 문자열의 처음부터 str을 검색하여 발견한 처음 인덱스 리턴,
//											| 없으면 -1 리턴
// ------------------------------------------------------------------------------------------------
// int find(const string& str, int pos)		| 문자열의 pos 위치부터 str을 검색하여 발견한 처음 인덱스
//											| 리턴. 없으면 -1 리턴
// ------------------------------------------------------------------------------------------------
// int rfind(const string& str,int pos)		| 문자열의 pos 위치부터 str을 검색하여 마지막에 발견한
//											| 인덱스 리턴. 없으면 -1리턴
// ------------------------------------------------------------------------------------------------
// int compare(const string& str)			| 문자열과 str을 비교하여 같으면 0을, 사전 순으로 현재 문자열이
//											| 앞에 오면 음수, 뒤에 오면 양수 리턴
// ------------------------------------------------------------------------------------------------
// string substr(int pos,int n)				| pos 위치부터 n개 문자를 새로운 서브스트링으로 생성, 리턴
// ------------------------------------------------------------------------------------------------
// void swap(string& str)					| 현재 객체의 문자열과 str 문자열을 서로 바꿔치기 함
//-------------------------------------------------------------------------------------------------
// char* c_str()							| C-스트링 문자열 리턴
// 
// 
// 
// 	string 클래스의 연산자 
// 
// string s="C++", string s1="C";, string s2="Java"; 일 때
// 
// 
// 
// 연산자		|			설명						| 사용 예			|결과
// ----------------------------------------------------------------------------
// s1=2			|s2를 s1에 치환							| s1=s2				|s1="Java"
// ----------------------------------------------------------------------------
// s []			|s의 [] 인덱스에 있는 문자				|char c=s[1]		|c='+'
// ----------------------------------------------------------------------------
// s1+s2		|s1과 s2를 연결한 새로운 문자열			|s1+s2				|"CJava"
// ----------------------------------------------------------------------------
// s1+=s2		| s1에 s2 문자열 연결					| s1+=s2			|s1="CJava"
// ----------------------------------------------------------------------------
// stream << s	| s를 stream 스트림에 출력				| cout<< s;			| "C++" 출력
// ----------------------------------------------------------------------------
// stream >> s	| stream에서 문자열을 S에 입력			| cin>>s			| 문자열 입력
// ----------------------------------------------------------------------------
// s1==s2		|s1과 s2가 같은 문자열이면 true			|s1==s2				| false
// ----------------------------------------------------------------------------
// s1!=s2		|s1과 s2가 다른 문자열이면 false		|s1!=s2				| true
// ----------------------------------------------------------------------------
// s1<s2		|s1이 사전 순으로 s2보다 앞에 오면 true | s1<s2				|true
// ----------------------------------------------------------------------------
// s1>s2		|s1이 사전 순으로 s2보다 뒤에 오면 true	| s1>s2				|false
// ----------------------------------------------------------------------------
// s1<=s2		|s1이 s2와 같거나 앞에 오면 true		| s1<=s2			|true
// ----------------------------------------------------------------------------
// s1>=s2		|s1이 s2와 같거나 뒤에 오면 true		| s1>=s2			|false
// 
// 
// 
 

// 
//			문자열 다루기
// 
// 
// 
// 
// * 문자열 치환
// 
// 
// 			문자열 치환은 간단히 = 연산자로 이용한다.
// 
// string a="Java", b="C++";
// a=b;	// a="C++"이 된다. a는 b를 복사한 문자열을 가진다.
// 
// 
// 
// 
// 
// 
// 
// 
// * 문자열 비교
// 
// 문자열 비교는 "compare()" 함수를 사용한다. 이 함수는 두 문자열이 같으면 0, str보다 사전 순으로 앞에 오면
// 음수, 뒤에 오면 양수를 리턴한다.
// 
// 
// string name="Kitae";
// string alias="Kito";
// 
// int res=name.compare(alias);							// name과 alias를 비교한다.
// if(res==0)cout<<"두 문자열이 같다.";					// name과 alias가 동일하다
// else if(res<0) cout<<name<<" < "<<alias<<endl;		// name이 앞에 옴
// else cout<<alias<< " < "<<name<<endl;				// name이 뒤에 옴
// 
// 
// 
// 
// 문자열 비교는 다음과 같이 비교 연산자를 사용하면 더 효과적이다.
// 
// if(name==alias) cot<<"두 문자열이 같다";
// if(name <alias) cout << name << "이 "<<alias <<"보다 사전에서 먼저 나온다.";
// 
// 
// 
// 
// 
// 
// * 두 문자열 연결
// 
// 
// 
// 							
// 
// 
//