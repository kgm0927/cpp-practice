#include <iostream>
#include<string>	// string 클래스를 사용하기 위해 반드시 필요
using namespace std;
int main() {
	string str;
	string address("서울시 성북구 삼선동 389");
	string copyAddress(address);

	char text[] = { 'L','o','v','e',' ','C','+','+','\0' };// C-스트링
	string title(text);										// "Love C++" 문자열을 가진 스트링 객체 생성

	cout << str << endl;
	cout << address << endl;
	cout << copyAddress << endl;
	cout << title << endl;


	
}




//
// 
// 
//		4.6 string 클래스를 이용한 문자열 사용
// 
// 
//	string 클래스 개요
// 
// C++에서 문자열을 다루는 방법은 다음 2가지 방법이 있다고 했다.
// 
// * C-string
// * string 클래스
// 
// 
// 
// 
// C-스트링은 C언어에서 쓰이는 방법으로, '\0'로 끝나는 문자 배열을
// 문자열로 취급하는 방법이다. 반면 string은 C++표준라이브러리에서 제공하는
// 클래스로서, 문자열을 객체로 다룬다. 
// 
// string 문자열을 저장하는 버퍼와 함께, 문자열을 다루는 다양하고 유용한 함수와 연산자들을
// 멤버로 가지고 있으므로, 개발자들은 C-스트링보다 쉽게 문자열을 다룰 수 있다.
// 
// string 클래스를 사용하기 위해 다음 코드가 필요하다.
// 
// #include <string>
// using namespace std;
// 
// 
// C-스트링은 초기에 할당받은 메모리 크기 이상의 문자열을 저장할 수 없기 때문에 개발자의 프로그램 작성에
// 어려움이 있다. 그러나 string 클래스는 문자열의 크기에 맞추어 스스로 메모리 크기를 조절하므로 사용하기 
// 매우 편리하다.
// 
// string str="I love";
// str.append("C++");
// 
// 
// 지금부터 문자열을 상황에 따라 '스트링 객체','스트링', string 객체로 혼용하여 부르기로 한다.
// 
// 
// 
// 
// 
// 
// 
// 
// 
//				string 객체 생성 및 출력
// 
// 
// 
// 
// 
// 
// string 객체 생성
// 
// string 클래스의 생성자를 이요하여 다음과 같이 다양하게 '문자열을 생성'할 수 있다.
// 문자열 크기에는 제한이 없다.
// 
// string str;		// 빈 문자열을 가진 스트링 객체
// string address("서울시 성북구 삼선동 389");		// 문자열 리터럴로 초기화
// string copyAddress(address);						// address를 복사한 copyAddress 생성
// 
// 
//	// C-string(char [] 배열)으로부터 스트링 객체 생성
// char text[] = { 'L','o','v','e', ' ','C','+','+','\0' };
// string title(text); // "Love C++"을 가진 string 객체 생성
// 
//
// 
// 
// 
// 
// 
// 
//  
// 
// 
// 
// string 객체가 가진 문자열 출력
// 
// string 객체의 문자열은 cout<<를 이용하여 쉽게 화면에 출력할 수 있다.
// 
// cout<< address<< endl;
// cout<<title<<endl;
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// string 객체의 동적 생성
// 
// 스트링 객체 역시 new와 delete 연산자를 이용하여 동적으로 생성하고 반환할 수 있다.
// 
// 
// string *p=new string("C++");// 스트링 객체 동적 생성
// cout<< *p; //"C++" 출력
// p->append("Great!!"); // p가 가리키는 스트링이 "C++ Great!!"가 됨
// cout<< *p			// "C++ Great!!" 출력
// delete p;			// 스트링 객체 반환
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// <표 4-1> string 클래스의 주요 생성자
// 
// 
// 생성자							|				설명
// -----------------------------------------------------------------------------
// string()							| 빈 문자열을 가진 스트링 객체 생성
// -----------------------------------------------------------------------------
// string(const string& str)		| str을 복사한 새로운 스트링 객체 생성
// -----------------------------------------------------------------------------
// string(const char* s)			| C-스트링 s의 문자열을 복사하여 스트링 객체 생성
// -----------------------------------------------------------------------------
// string(const char* s,int n)		| 문자 배열 s에서 n개의 문자를 복사하여 스트링 객체 생성
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
//				string 객체에 문자열 입력
// 
// * string 객체에 문자열 입력
// 
// cin>>을 이용하여 키보드로부터 string 객체에 문자열을 입력받을 수 있다. 키보드로부터
// 이름을 입력받아 name에 저장하는 코드를 보자.
// 
// string name;
// cin>> name;
// 
// >>연산자를 쓰기 쉽지만 공백 문자가 입력되면 그 앞까지 하나의 문자열로 다루기 때문에
// 공백문자를 포함하는 문자열은 읽어 들일 수 없다. 이런 문제는 '<string> 헤더 파일'에 선언된
// 'getline() 전역 함수'를 이용하면 된다. getline()으로 공백 문자가 낀 한 라인의 문자열을 입력받는
// 예를 들면 다음과 같다.
// 
// 
// 
// 
// 
// string name;
// getline(cin,name,'\n');
// 
// 이 getline()은 2장에서 설명한 cin.getline()과 다르다. getline()의 첫 번째 인자에는 cin을,
// 두 번째 인자에는 string 객체를, 세 번째 인자에는 문자열의 마지막을 표시하는 구분 문자(delimiter)를
// 준다. 위의 코드는 '\n'를 만날 때까지 입력된 문자들을 name 객체에 문자열로 저장하는 코드다. '\n'는
// 삽입하지 않는다.
// 
// 
// 
//

